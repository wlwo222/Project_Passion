package www.dream.com.hashTag.service;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import www.dream.com.framework.util.StringUtil;
import www.dream.com.hashTag.model.HashtagVO;
import www.dream.com.hashTag.model.IHashTagOpponent;
import www.dream.com.hashTag.persistence.HashTagMapper;
import www.dream.com.party.model.Party;

@Service
public class HashTagService {
	@Autowired
	private HashTagMapper hashTagMapper;
	/**
	 * 
	 * @param hashTagOpponent 상대
	 * @param mapOccur 단어와 출현 횟수
	 */
	public void createHashTagAndMapping(IHashTagOpponent hashTagOpponent,
			Map<String, Integer> mapOccur) {
		Set<String> setHashTag = mapOccur.keySet();
		
		if (setHashTag.isEmpty()) {
			//게시글에서 단어가 나타나지 않았으면 처리할 것이 없군요
			return;
		}
	
		Set<HashtagVO> setExisting = hashTagMapper.findExisting(setHashTag);
		//기존에 있는 것들과는 짝 지어 주어야합니다.
		for (HashtagVO hashtag : setExisting) {
			hashtag.setOccurCnt(mapOccur.get(hashtag.getHashtag()));
		}
		
		//setHashTag에 남은 것들은 신규 처리해야할 것들입니다.
		for (HashtagVO hashtag : setExisting) {
			setHashTag.remove(hashtag.getHashtag());
		}
		Set<String> setNewHashTag = setHashTag;
		if (! setNewHashTag.isEmpty()) {
			//새로운 단어를 HashTag 테이블에 등록해줍니다.
			int[] ids = StringUtil.convertCommaSepString2IntArr(hashTagMapper.getIds(setNewHashTag.size()));
			int idx = 0;
			Set<HashtagVO> setHT = new HashSet<>();
			for (String hashTag : setNewHashTag) {
				HashtagVO newHashtag = new HashtagVO(ids[idx++], hashTag);
				newHashtag.setOccurCnt(mapOccur.get(hashTag));
				setHT.add(newHashtag);
			}
			hashTagMapper.createHashTag(setHT);
			//새 단어를 단어집에 넣었으니 기존 단어가 된 것입니다.
			setExisting.addAll(setHT);
		}

		//기존 단어 및 신규 단어와 짝짓기
		hashTagMapper.insertMapBetweenStringId(setExisting, hashTagOpponent);
	}
	
	public void deleteMap(IHashTagOpponent hashTagOpponent) {
		hashTagMapper.deleteMapBetweenStringId(hashTagOpponent);
	}

	/**
	 * 기존에 검색한 단어는 활용 횟수 올려주기
	 * 신규 단어는 단어 새롭게 만들고 횟수는 1
	 * @param curUser
	 * @param mapSearchWord
	 */
	public void mngHashTagAndMapping(Party curUser, Map<String, Integer> mapSearchWord) {
		Set<String> setHashTag = mapSearchWord.keySet();
		
		if (setHashTag.isEmpty()) {
			//게시글에서 단어가 나타나지 않았으면 처리할 것이 없군요
			return;
		}
	
		//기존에 검색해서 활용되었고 활용 횟수 1 증가 시킬 대상
		Set<HashtagVO> setPrevUsed = hashTagMapper.findPrevUsedHashTag(curUser, setHashTag); //기존에 검색에서 활용된 단어들
		Set<HashtagVO> setExisting = hashTagMapper.findExisting(setHashTag); //완전한 신규단어 (해쉬태그테이블에없는신규단어)
		
		//기존에 있는 것들과는 짝 지어 주어야합니다.
		for (HashtagVO hashtag : setPrevUsed) {
			hashtag.setOccurCnt(mapSearchWord.get(hashtag.getHashtag()));
		}
		
		//setHashTag에 남은 것들은 신규 처리해야할 것들입니다.
		for (HashtagVO hashtag : setExisting) {
			setHashTag.remove(hashtag.getHashtag());
		}
		//검색에서 새롭게 나타난 단어. 새 단어 등록 해 주는 이유는 게시글이나 상품이 새롭게 등장하면 즉시 검색 되도록 합니다.
		Set<String> setNewHashTag = setHashTag;
		if (! setNewHashTag.isEmpty()) {
			//새로운 단어를 HashTag 테이블에 등록해줍니다.
			int[] ids = StringUtil.convertCommaSepString2IntArr(hashTagMapper.getIds(setNewHashTag.size()));
			int idx = 0;
			Set<HashtagVO> setHT = new HashSet<>();
			for (String hashTag : setNewHashTag) {
				HashtagVO newHashtag = new HashtagVO(ids[idx++], hashTag);
				newHashtag.setOccurCnt(mapSearchWord.get(hashTag));
				setHT.add(newHashtag);
			}
			hashTagMapper.createHashTag(setHT);
			//새 단어를 단어집에 넣었으니 기존 단어가 된 것입니다.
			setPrevUsed.addAll(setHT);
		}
		//관리되던 단어가 검색에서 새롭게 나타남
		setPrevUsed.addAll(setExisting);

		//기존 활용 횟수 정보 없애기
		hashTagMapper.deleteMapBetweenOpponentStringId(setExisting, curUser);
		//기존 단어 및 신규 단어와 짝짓기
		hashTagMapper.insertMapBetweenStringId(setExisting, curUser);
	}
	
}
